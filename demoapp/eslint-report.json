[{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\config\\database\\databaseSetupMysql.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":15,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":13,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":7}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const mysql = require('mysql2');\n\nconst pool = mysql.createPool({\n    connectionLimit : 100,\n    host: '208.109.33.187',  // ip address of server running mysql\n    port:  \"3306\",\n    user: \"rmUser\",    // user name to your mysql database\n    password: \"Trayi@123\",\n    database: 'kabadijeeproddb', // use the specified database\n    multipleStatements: true\n});\n\nmodule.exports = {\n    pool    \n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\config\\database\\querywrapperMysql.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":15,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'exports' is not defined.","line":15,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":8},{"ruleId":"no-async-promise-executor","severity":2,"message":"Promise executor functions should not be async.","line":16,"column":24,"nodeType":"Identifier","messageId":"async","endLine":16,"endColumn":29}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const mysql = require('./databaseSetupMysql');\n\nasync function getConnection(){\n    return new Promise((resolve, reject) => {\n        mysql.pool.getConnection(function (err, connection) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(connection);\n          }\n        });\n      });\n}\n\nexports.execute = async function (query, bindValuesArray) {\n    return new Promise(async (resolve, reject) => {\n        try {\n          const connection = await getConnection();\n          connection.query(query, bindValuesArray, function (err, result) {\n            if (err) {\n                connection.release();\n                reject(err);\n            } else {\n                connection.release();\n                resolve(result);\n            }\n          });\n        } catch (e) {\n            reject(e);\n        }\n      });    \n}\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\controller\\AdminLoginController.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":19,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":26},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":31,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":53},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":22,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":22,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const {message} = require('../helper/message');\nconst { AdminLoginService } = require('../services');\n\nclass AdminLoginController {\n  async adminLogin(req, res) {\n    try {\n      const queryData = req.body;\n      const result = await AdminLoginService.adminlogin(queryData);\n      if(result.status===200){\n\n          res.status(201).json({ success: true, message:message.LOGIN_SUCCESSFULL, data: result });\n      }else if(result.status===400){\n        res.status(201).json({ success: false, message:message.LOGIN_UNSUCCESSFULL});\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, message:message.NOT_FOUND });\n    }\n  }\n  \n}\n\nmodule.exports = new AdminLoginController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\controller\\BlogPostController.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":29,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":36},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":19,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":103,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { BlogPostService } = require('../services');\nconst {message} = require('../helper/message')\n\nclass BlogPostController {\n  async addBlog(req, res) {\n    try {\n      const queryData = req.body;\n      const image_file = req.file;\n      const result = await BlogPostService.addblogService(queryData,image_file);\n      if(result.status === 200){\n        res.status(201).json({success:true, message:message.SURVEY_ADDED})\n      }else{\n        res.status(400).json({success:false, message:message.NOT_FOUND})\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, message:message.SERVER_ERROR });\n    }\n  }\n  async updateBlog(req, res){\n    try{\n      const bodyData = req.body;\n      const image_file = req.file;\n      const result = await BlogPostService.updateBlogService(bodyData,image_file);\n      if(result.status === 200){\n        res.status(200).json({success:true, message:message.SURVEY_UPDATED})\n      }else{\n        res.status(400).json({success:false, message:message.NOT_FOUND})\n      }\n    }catch(e){\n      res.status(500).json({success:false, message:message.SERVER_ERROR})\n    }\n  }\n\n  async getBlog(req, res) {\n    try {\n      const page = parseInt(req.query.page) || 1;\n      const limit = 8;\n      const queryData = req.body;\n      const result = await BlogPostService.getblogService({ ...queryData, page, limit });\n  \n      if (result) {\n        // Send a success response with the paginated data\n        res.status(200).json({ success: true, message: message.FETCHING_DATA, data: result });\n      } else {\n        // Send a response indicating that no data was found\n        res.status(404).json({ success: false, message: message.NOT_FOUND, data: [] });\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, message: message.SERVER_ERROR, error: error.message });\n    }\n  }\n  async getAdminBlog(req, res) {\n    try {\n      const page = parseInt(req.query.page) || 1;\n      const limit = 10;\n      const queryData = req.body;\n      const result = await BlogPostService.getAdminBlogService({ ...queryData, page, limit });\n  \n      if (result) {\n        // Send a success response with the paginated data\n        res.status(200).json({ success: true, message: message.FETCHING_DATA, data: result });\n      } else {\n        // Send a response indicating that no data was found\n        res.status(404).json({ success: false, message: message.NOT_FOUND, data: [] });\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, message: message.SERVER_ERROR, error: error.message });\n    }\n  }\n\n  async getDetailBlog(req, res) {\n    try {\n      const id = req.query.id;\n      const result = await BlogPostService.getDetailblogService(id);\n  \n      if (result) {\n        // Send a success response with the paginated data\n        res.status(200).json({ success: true, message: message.FETCHING_DATA, data: result });\n      } else {\n        // Send a response indicating that no data was found\n        res.status(404).json({ success: false, message: message.NOT_FOUND, data: [] });\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, message: message.SERVER_ERROR, error: error.message });\n    }\n  }\n  async createAffilation(req, res) {\n    try {\n      const queryData = req.body;\n      const image_file = req.file;\n      const result = await BlogPostService.createAffilationService(queryData,image_file);\n      if(result.status === 200){\n        res.status(201).json({success:true, message:message.SURVEY_ADDED})\n      }else{\n        res.status(400).json({success:false, message:message.NOT_FOUND})\n      }\n    } catch (error) {\n      res.status(500).json({ success: false, message:message.SERVER_ERROR });\n    }\n  }\n}\n\nmodule.exports = new BlogPostController();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\controller\\CategoryController.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":49},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":26,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":64},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":33},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":14,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":19,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":31,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":7}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { message } = require(\"../helper/message\");\nconst CategoryServices = require(\"../services/CategoryService\")\n\nclass CategoryController{\n    async createCategory(req, res){\n        try {\n            const result = await CategoryServices.addCategoryService(req.body);\n            return (result.status === 201)?res.status(201).json({success:true, message:message.CATEGORY_ADDED}):res.status(400).json({success:false, message:message.NOT_FOUND})\n        } catch (error) {\n            res.status(500).json({success:false, message:message.SERVER_ERROR})\n        }\n    }\n    async getCategoryController(req, res){\n        try {\n            const result = await CategoryServices.getCategoryService(req.body);\n            return (result)?res.status(201).json({success:true, message:message.FETCHING_DATA, data:result}):res.status(400).json({success:false, message:message.NOT_FOUND, data:[]})\n        } catch (error) {\n            throw error;\n        }\n    }\n    async updateCategory(req, res){\n        try {\n            const result = await CategoryServices.updateCategoryService(req.body);\n            return (result.status === 201)?res.status(201).json({success:true, message:message.CATEGORY_UPDATED}):res.status(400).json({success:false, message:message.NOT_FOUND})\n        } catch (error) {\n            res.status(500).json({success:false, message:message.SERVER_ERROR})\n        }\n    }\n}\n\nmodule.exports = new CategoryController();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\controller\\SubCategoryController.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":49},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":29,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":70},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":36},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":14,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":19,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":31,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":7}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { message } = require(\"../helper/message\");\nconst SubCategoryServices = require(\"../services/SubCategoryService\")\n\nclass SubCategoryController{\n    async createSubCategory(req, res){\n        try {\n            const result = await SubCategoryServices.addSubCategoryService(req.body);\n            return (result.status === 201)?res.status(201).json({success:true, message:message.CATEGORY_ADDED}):res.status(400).json({success:false, message:message.NOT_FOUND})\n        } catch (error) {\n            res.status(500).json({success:false, message:message.SERVER_ERROR})\n        }\n    }\n    async getSubCategoryController(req, res){\n        try {\n            const result = await SubCategoryServices.getSubCategoryService(req.body);\n            return (result)?res.status(201).json({success:true, message:message.FETCHING_DATA, data:result}):res.status(204).json({success:false, message:message.NOT_FOUND, data:[]})\n        } catch (error) {\n            throw error;\n        }\n    }\n    async updateSubCategory(req, res){\n        try {\n            const result = await SubCategoryServices.updateSubCategoryService(req.body);\n            return (result.status === 201)?res.status(201).json({success:true, message:message.CATEGORY_UPDATED}):res.status(204).json({success:false, message:message.NOT_FOUND})\n        } catch (error) {\n            res.status(500).json({success:false, message:message.SERVER_ERROR})\n        }\n    }\n}\n\nmodule.exports = new SubCategoryController();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\controller\\index.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":26,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":30,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":63},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const BlogPostController=require('./BlogPostController')\nconst AdminLoginController = require('./AdminLoginController')\n\n\nmodule.exports={\n    BlogPostController,\n    AdminLoginController\n\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\databaseDao\\AdminLoginDAO.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":28},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":5,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":19,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":24,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":7}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execute } = require(\"../config/database/querywrapperMysql\");\n\nclass AdminLoginDAO {\n    async adminlogin(payload){\n        try{\n            const {userName, password} = payload;\n            let query = `SELECT * FROM icashiq.icashiq_users WHERE username = ? AND is_Admin = ? AND password = ? LIMIT 1`;\n\n            let result = await execute(query, [userName, 1, password])\n            if (result.length === 1) {\n                query = 'update icashiq.icashiq_users set is_active = ? where username = ?'\n                result = await execute(query, [1, userName])\n                return true;\n            } else {\n                return false;\n            }            \n        }catch (error) {\n            throw error;\n          }\n    }\n}\n\n\nmodule.exports = new AdminLoginDAO();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\databaseDao\\BlogPostDao.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fs' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":9},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":12,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'streamifier' is assigned a value but never used.","line":3,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":3,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":3,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":4,"column":31,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":4,"endColumn":73},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'uploadResult' is assigned a value but never used.","line":41,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createdAt' is assigned a value but never used.","line":46,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'publishedDate' is assigned a value but never used.","line":47,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":24},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":66,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":105,"endColumn":6},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":111,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":133,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is assigned a value but never used.","line":114,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":17},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":137,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":159,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is assigned a value but never used.","line":140,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":17},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":163,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":175,"endColumn":6},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":185,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":185,"endColumn":7}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execute } = require(\"../config/database/querywrapperMysql\");\nconst fs = require('fs')\nconst streamifier = require('streamifier')\nconst uploadToBlobContainer = require('../public/uploadToBlobContainer')\n\nclass BlogPostDAO {\n  // api function for post a blog\n  async addblog(payload, image) {\n    try {\n      const fileName = `blog_images/${image.originalname}`;\n      let uploadResult;\n      try {\n        uploadResult = await uploadToBlobContainer(fileName, image.buffer);\n      } catch (uploadError) {\n        // Handle the Azure Blob Storage upload error\n        return false;\n      }\n      const { title, description, publishedBy, is_active, category, subCategory } = payload;\n      let publishedDate = new Date().toLocaleDateString()\n      const query = `\n        INSERT INTO icashiq.blog_post(title, image, description, published_by, published_date, is_active, blog_category_id, subCategory_id)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      `;\n\n      const result = await execute(query, [title, uploadResult, description, publishedBy, publishedDate, is_active, category, subCategory]);\n      if (result.affectedRows > 0) {\n        return true; // Indicate that the survey was successfully added\n      } else {\n        return false; // Indicate that the survey was not added\n      }\n    } catch (error) {\n      return error;\n    }\n  }\n  // api function for createAffilation\n  async createAffilation(payload, image) {\n    try {\n      const fileName = `blog_images/${image.originalname}`;\n      let uploadResult;\n      try {\n        uploadResult = await uploadToBlobContainer(fileName, image.buffer);\n      } catch (uploadError) {\n        // Handle the Azure Blob Storage upload error\n        return false;\n      }  \n      const { panelName, description, link, is_active, createdAt } = payload;\n      let publishedDate = new Date().toLocaleDateString()\n      const query = `\n        INSERT INTO icashiq.affiliation(panelName, description, link, is_active, createdAt)\n        VALUES (?, ?, ?, ?, ?)\n      `;\n\n      const result = await execute(query, [panelName, description, link, is_active, new Date()]);\n      if (result.affectedRows > 0) {\n        return true; // Indicate that the survey was successfully added\n      } else {\n        return false; // Indicate that the survey was not added\n      }\n    } catch (error) {\n      return error;\n    }\n  }\n  // api function for update blog\n\n  async updateBlog(payload, image) {\n    try {\n      let fileName = ''\n      if (image) { \n        fileName = `blog_images/${image.originalname}`;\n       }\n      let uploadResult;\n      try {\n        if (image) { \n          uploadResult = await uploadToBlobContainer(fileName, image.buffer); \n        }\n      } catch (uploadError) {\n        // Handle the Azure Blob Storage upload error\n        return false;\n      }\n      const { id, title, description, publishedBy, is_active } = payload;\n      let publishedDate = new Date().toLocaleDateString()\n      let result = ''\n      if (image) {\n        const updateQuery = `\n          UPDATE icashiq.blog_post\n          SET title = ?, image = ?, description = ?, published_by = ?, published_date = ?, is_active = ?\n          WHERE id = ?\n        `;\n        result = await execute(updateQuery, [title, uploadResult, description, publishedBy, publishedDate, is_active, id]);\n      } else {\n        const updateQuery = `\n            UPDATE icashiq.blog_post\n            SET title = ?,  description = ?, published_by = ?, published_date = ?, is_active = ?\n            WHERE id = ?\n          `;\n        result = await execute(updateQuery, [title, description, publishedBy, publishedDate, is_active, id]);\n      }\n      if (result.affectedRows > 0) {\n        return true; // Indicate that the survey was successfully updated\n      } else {\n        return false; // Indicate that the survey was not updated\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // api function for get a blog\n\n  async getblog(payload) {\n    try {\n      const limit = payload.limit;\n      const page = payload.page;\n      const { id } = payload;\n      const offset = (page - 1) * limit;\n\n      const query = `\n        SELECT * FROM icashiq.blog_post where is_active = ? order by id desc\n        LIMIT ? OFFSET ?;\n  \n        SELECT COUNT(id) as totalCount FROM icashiq.blog_post where is_active = 1;\n      `;\n\n      const [results, countResult] = await execute(query, [1, limit, offset]);\n      if (results && countResult.length > 0) {\n        const totalCount = countResult[0].totalCount;\n        return { data: results, totalCount };\n      } else {\n        return { data: [], totalCount: 0 };\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async adminGetblog(payload) {\n    try {\n      const limit = payload.limit;\n      const page = payload.page;\n      const { id } = payload;\n      const offset = (page - 1) * limit;\n\n      const query = `\n        SELECT * FROM icashiq.blog_post order by id desc\n        ;\n  \n        SELECT COUNT(id) as totalCount FROM icashiq.blog_post;\n      `;\n\n      const [results, countResult] = await execute(query, [limit, offset]);\n      if (results && countResult.length > 0) {\n        const totalCount = countResult[0].totalCount;\n        return { data: results, totalCount };\n      } else {\n        return { data: [], totalCount: 0 };\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getDetailBlog(id) {\n    try {\n      const query = `\n        SELECT * FROM icashiq.blog_post WHERE id=?`;\n\n      const result = await execute(query, [id]);\n      if (result) {\n        return { data: result };\n      } else {\n        return { data: [] };\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n\n\n\n\n}\n\nmodule.exports = new BlogPostDAO();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\databaseDao\\CategoryDao.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":28},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":15,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":21,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":34,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":7}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execute } = require(\"../config/database/querywrapperMysql\")\n\nclass CategoryDao{\n    async addCategory(payload){\n        try {\n            const {category_name, is_Active} = payload\n            const query = `INSERT INTO icashiq.blog_category(category_name, is_active)VALUES(?,?)`\n            const result = await execute(query,[category_name, is_Active])\n            return (result.affectedRows > 0)? true : false ;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    async getCategoryDao(){\n        try {\n            const query = `SELECT * FROM icashiq.blog_category`;\n            const result = await execute(query,[])\n            return result.length>0?{data:result}:{data:[]}\n        } catch (error) {\n            throw error;\n        }\n    }\n    async updateCategory(payload){\n        try {\n            const {id, category_name, is_Active} = payload\n            const query = `UPDATE icashiq.blog_category SET category_name = ?, is_active = ? where id = ?`;\n            const result = await execute(query,[category_name, is_Active, id])\n            return (result.affectedRows > 0)? true : false ;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n}\nmodule.exports = new CategoryDao();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\databaseDao\\SubCategoryDao.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":28},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":15,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":21,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":34,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":7}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { execute } = require(\"../config/database/querywrapperMysql\")\n\nclass SubCategoryDao{\n    async addSubCategory(payload){\n        try {\n            const {name, is_active} = payload\n            const query = `INSERT INTO icashiq.blog_sub_category(sub_category_name, is_active)VALUES(?,?)`\n            const result = await execute(query,[name,is_active])\n            return (result.affectedRows > 0)? true : false ;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    async getSubCategoryDao(){\n        try {\n            const query = `SELECT * FROM icashiq.blog_sub_category`;\n            const result = await execute(query,[])\n            return result?{data:result}:{data:[]}\n        } catch (error) {\n            throw error;\n        }\n    }\n    async updateSubCategory(payload){\n        try {\n            const {id, name, is_active} = payload\n            const query = `UPDATE icashiq.blog_sub_category SET sub_category_name = ?, is_active = ? where id = ?`;\n            const result = await execute(query,[name, is_active, id])\n            return (result.affectedRows > 0)? true : false ;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n}\nmodule.exports = new SubCategoryDao();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\databaseDao\\index.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":19,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":26},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":60},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":5,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const BlogPostDao=require('../databaseDao/BlogPostDao')\nconst AdminLoginDAO=require('../databaseDao/AdminLoginDAO')\n\n\nmodule.exports = {\n    BlogPostDao,\n    AdminLoginDAO\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\helper\\message.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":12,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const message = {\n    SURVEY_ADDED : \"added successfully\",\n    SURVEY_UPDATED:\"Updated Successfully\",\n    SERVER_ERROR : \"Internal Server Error\",\n    FETCHING_DATA : \"Data fetched successfully\",\n    NOT_FOUND : \"No Data Found\",\n    LOGIN_SUCCESSFULL :\"Login Successfull\",\n    LOGIN_UNSUCCESSFULL :\"Check UserName or Password\",\n    CATEGORY_ADDED: \"Category added successfully\",\n    CATEGORY_UPDATED: \"Category updated successfully\"\n}\nmodule.exports = { message }","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\index.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":17,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":14,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":3,"column":20,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":3,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":27},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":4,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":4,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":14,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":21}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst router = require('./routes/route');\n\nconst app = express();\n\napp.use(cors()); // Enable CORS for all routes\napp.use(bodyParser.json()); // Parse JSON bodies\napp.use(bodyParser.urlencoded({ extended: true })); // Parse URL-encoded bodies\n\napp.use(router); // Use your defined routes\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n  console.log('Server started on port', PORT);\n});\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\public\\uploadToBlobContainer.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":59,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":89},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":59,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isBuffer' is assigned a value but never used.","line":2,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":17},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":22,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":29},{"ruleId":"no-async-promise-executor","severity":2,"message":"Promise executor functions should not be async.","line":5,"column":22,"nodeType":"Identifier","messageId":"async","endLine":5,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'uploadResponse' is defined but never used.","line":20,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":41,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":7}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { BlobServiceClient, StorageSharedKeyCredential } = require(\"@azure/storage-blob\");\nconst { isBuffer } = require(\"util\");\n\nasync function uploadToBlobContainer( fileName, blobData ) {\n  return new Promise(async function (resolve, reject) {\n    const account = \"storageaccountzampl852f\";\n    const accountKey = \"zmuUJCRaIqd9/CPZcFX0DxcQrGCU8johImVJt6EMFUf2DyM4UyGDqAmNvEucq3dF0JLxJHHCU5MT4SIvBAi8QQ==\";\n    const containerName = `icashiq`;\n    let imageLink = `https://${account}.blob.core.windows.net/${containerName}/${fileName}`\n\n    const sharedKeyCredential = new StorageSharedKeyCredential(account, accountKey);\n\n    const blobServiceClient = new BlobServiceClient(`https://${account}.blob.core.windows.net`, sharedKeyCredential);\n\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n    const blobName = fileName;\n\n    let appendBlobClient = containerClient.getBlockBlobClient(blobName);\n     appendBlobClient = containerClient.getAppendBlobClient(blobName);\n    let uploadResponse;\n    try {\n      // Check if the blob already exists, if not, create it.\n      if (!(await appendBlobClient.exists())) {\n          await appendBlobClient.create();\n      }\n      appendBlobClient\n        .appendBlock(blobData, blobData.byteLength)\n        .then((response) => {\n          resolve({ success: true, response });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n      resolve(imageLink+'')\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nmodule.exports = uploadToBlobContainer;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\routes\\route.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":17,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":3,"column":54,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":3,"endColumn":78},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":3,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":61},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":4,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":4,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":4,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":23},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":5,"column":28,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":5,"endColumn":71},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":5,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":5,"endColumn":35},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":6,"column":31,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":6,"endColumn":77},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":6,"column":31,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'Buffer' is not defined.","line":19,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":44,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":7}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require(\"express\");\nconst router = express.Router();\nconst { BlogPostController, AdminLoginController } = require('../controller');\nconst multer = require(\"multer\");\nconst CategoryController = require(\"../controller/CategoryController\");\nconst SubCategoryController = require(\"../controller/SubCategoryController\");\n\n\nconst storage = multer.memoryStorage();\n\nstorage._handleFile = function _handleFile(req, file, cb) {\n  const chunks = [];\n  \n  file.stream.on('data', (chunk) => {\n    chunks.push(chunk);\n  });\n\n  file.stream.on('end', () => {\n    const data = Buffer.concat(chunks);\n    cb(null, {\n      buffer: data,\n      size: data.length,\n    });\n  });\n};\n\nconst upload = multer({ storage: storage });\n\nrouter.post('/api/add-blog', upload.single('image'), BlogPostController.addBlog);\nrouter.get('/api/get-blog',BlogPostController.getBlog);\nrouter.post('/api/admin-login', AdminLoginController.adminLogin);\nrouter.post('/api/update-blog', upload.single('image'), BlogPostController.updateBlog);\nrouter.get(`/api/post-detail`, BlogPostController.getDetailBlog);\nrouter.post('/api/category', CategoryController.createCategory);\nrouter.get('/api/category', CategoryController.getCategoryController);\nrouter.patch('/api/category', CategoryController.updateCategory);\nrouter.post('/api/sub-category', SubCategoryController.createSubCategory);\nrouter.get('/api/sub-category', SubCategoryController.getSubCategoryController);\nrouter.patch('/api/sub-category', SubCategoryController.updateSubCategory);\nrouter.get('/api/admin-getBlog', BlogPostController.getAdminBlog);\nrouter.post('/api/admin-createAffilation', upload.single('image'),BlogPostController.createAffilation);\n\n\nmodule.exports =router","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\services\\AdminLoginServices.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":27,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":52},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":18,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":7}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { AdminLoginDAO } = require('../databaseDao')\n\n\nclass AdminLoginService{\n    async adminlogin(queryData){\n        try {\n            const result = await AdminLoginDAO.adminlogin(queryData);\n            if(result == true){\n                return { status: 200, success: true };\n               }else{\n                return { status: 400, success: false };\n               }\n        } catch (error) {\n            return error;\n        }\n    }\n}\nmodule.exports=new AdminLoginService();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\services\\BlogPostServices.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":22,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":29},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":45,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":54,"endColumn":10},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":57,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":66,"endColumn":10},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":71,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":80,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":84,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":84,"endColumn":7}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { BlogPostDao}=require('../databaseDao')\n\n\nclass BlogPostService{\n  async addblogService(queryData, image) {\n    try {\n      const result = await BlogPostDao.addblog(queryData, image);\n      \n      if (result) {\n        return { status: 200, success: true };\n      } else {\n        return { status: 400, success: false };\n      }\n    } catch (error) {\n      return { status: 500, success: false, error };\n    }\n  }\n  async createAffilationService(queryData, image) {\n    try {\n      const result = await BlogPostDao.createAffilation(queryData, image);\n      \n      if (result) {\n        return { status: 200, success: true };\n      } else {\n        return { status: 400, success: false };\n      }\n    } catch (error) {\n      return { status: 500, success: false, error };\n    }\n  }\n  async updateBlogService(queryData, image) {\n    try {\n      const result = await BlogPostDao.updateBlog(queryData, image);\n      \n      if (result) {\n        return { status: 200, success: true };\n      } else {\n        return { status: 400, success: false };\n      }\n    } catch (error) {\n      return { status: 500, success: false, error };\n    }\n  }\n    async getblogService(queryData) {\n        try {\n          const result = await  BlogPostDao.getblog(queryData);\n          if (result) {\n            return result;\n          } else {\n            throw new Error('No survey data found.');\n          }\n        } catch (error) {\n          throw error;\n        }\n      }\n      async getAdminBlogService(queryData) {\n        try {\n          const result = await  BlogPostDao.adminGetblog(queryData);\n          if (result) {\n            return result;\n          } else {\n            throw new Error('No survey data found.');\n          }\n        } catch (error) {\n          throw error;\n        }\n      }\n\n\n      async getDetailblogService(id) {\n        try {\n          const result = await  BlogPostDao.getDetailBlog(id);\n          if (result) {\n            return result;\n          } else {\n            throw new Error('Data Not found.');\n          }\n        } catch (error) {\n          throw error;\n        }\n      }\n      \n}\nmodule.exports=new BlogPostService();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\services\\CategoryService.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":21,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":58},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":28},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":14,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":20,"endColumn":10},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":23,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":29,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":33,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const CategoryDao = require(\"../databaseDao/CategoryDao\");\n\nclass CategoryService{\n    async addCategoryService(queryData){\n        try {\n            const result = await CategoryDao.addCategory(queryData);\n            return result? {status:201,success:true}:{status:400, success:false}\n            \n        } catch (error) {\n            console.log(error);\n        }\n    }\n    async getCategoryService(){\n        try {\n            const result = await CategoryDao.getCategoryDao()\n            return (result)?result:[];\n\n        } catch (error) {\n            throw error\n        }\n    }\n    async updateCategoryService(queryData){\n        try {\n            const result = await CategoryDao.updateCategory(queryData);\n            return result? {status:201,success:true}:{status:400, success:false}\n            \n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nmodule.exports = new CategoryService();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\services\\SubCategoryService.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":24,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":64},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":31},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":14,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":19,"endColumn":10},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":22,"column":9,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":28,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":32,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const SubCategoryDao = require(\"../databaseDao/SubCategoryDao\");\n\nclass SubCategoryService{\n    async addSubCategoryService(queryData){\n        try {\n            const result = await SubCategoryDao.addSubCategory(queryData);\n            return result? {status:201,success:true}:{status:400, success:false}\n            \n        } catch (error) {\n            console.log(error);\n        }\n    }\n    async getSubCategoryService(){\n        try {\n            const result = await SubCategoryDao.getSubCategoryDao()\n            return (result)?result:[];\n        } catch (error) {\n            throw error\n        }\n    }\n    async updateSubCategoryService(queryData){\n        try {\n            const result = await SubCategoryDao.updateSubCategory(queryData);\n            return result? {status:201,success:true}:{status:400, success:false}\n            \n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nmodule.exports = new SubCategoryService();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\Gitrepo\\nodeapp\\sohailsp\\demoapp\\services\\index.js","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":23,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":52},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":30},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":28,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":59},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":7}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const BlogPostService=require('./BlogPostServices')\nconst AdminLoginService  = require('./AdminLoginServices')\n\nmodule.exports={\n    BlogPostService,\n    AdminLoginService\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]